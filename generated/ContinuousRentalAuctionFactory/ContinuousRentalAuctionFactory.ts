// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ContinuousRentalAuctionDeployed extends ethereum.Event {
  get params(): ContinuousRentalAuctionDeployed__Params {
    return new ContinuousRentalAuctionDeployed__Params(this);
  }
}

export class ContinuousRentalAuctionDeployed__Params {
  _event: ContinuousRentalAuctionDeployed;

  constructor(event: ContinuousRentalAuctionDeployed) {
    this._event = event;
  }

  get auctionAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get controllerObserverAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get controllerObserverImplementation(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ContinuousRentalAuctionFactory__createResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getAuctionClone(): Address {
    return this.value0;
  }

  getControllerObserverClone(): Address {
    return this.value1;
  }
}

export class ContinuousRentalAuctionFactory extends ethereum.SmartContract {
  static bind(address: Address): ContinuousRentalAuctionFactory {
    return new ContinuousRentalAuctionFactory(
      "ContinuousRentalAuctionFactory",
      address
    );
  }

  create(
    _acceptedToken: Address,
    _controllerObserverImplementation: Address,
    _beneficiary: Address,
    _minimumBidFactorWad: BigInt,
    _reserveRate: BigInt,
    _controllerObserverExtraArgs: Bytes
  ): ContinuousRentalAuctionFactory__createResult {
    let result = super.call(
      "create",
      "create(address,address,address,uint96,int96,bytes):(address,address)",
      [
        ethereum.Value.fromAddress(_acceptedToken),
        ethereum.Value.fromAddress(_controllerObserverImplementation),
        ethereum.Value.fromAddress(_beneficiary),
        ethereum.Value.fromUnsignedBigInt(_minimumBidFactorWad),
        ethereum.Value.fromSignedBigInt(_reserveRate),
        ethereum.Value.fromBytes(_controllerObserverExtraArgs)
      ]
    );

    return new ContinuousRentalAuctionFactory__createResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_create(
    _acceptedToken: Address,
    _controllerObserverImplementation: Address,
    _beneficiary: Address,
    _minimumBidFactorWad: BigInt,
    _reserveRate: BigInt,
    _controllerObserverExtraArgs: Bytes
  ): ethereum.CallResult<ContinuousRentalAuctionFactory__createResult> {
    let result = super.tryCall(
      "create",
      "create(address,address,address,uint96,int96,bytes):(address,address)",
      [
        ethereum.Value.fromAddress(_acceptedToken),
        ethereum.Value.fromAddress(_controllerObserverImplementation),
        ethereum.Value.fromAddress(_beneficiary),
        ethereum.Value.fromUnsignedBigInt(_minimumBidFactorWad),
        ethereum.Value.fromSignedBigInt(_reserveRate),
        ethereum.Value.fromBytes(_controllerObserverExtraArgs)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ContinuousRentalAuctionFactory__createResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _host(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _cfa(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get _acceptedToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _controllerObserverImplementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _beneficiary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _minimumBidFactorWad(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _reserveRate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _controllerObserverExtraArgs(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get auctionClone(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get controllerObserverClone(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}
