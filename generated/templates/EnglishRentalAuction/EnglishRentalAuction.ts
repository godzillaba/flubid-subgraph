// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DepositClaimed extends ethereum.Event {
  get params(): DepositClaimed__Params {
    return new DepositClaimed__Params(this);
  }
}

export class DepositClaimed__Params {
  _event: DepositClaimed;

  constructor(event: DepositClaimed) {
    this._event = event;
  }

  get renter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get acceptedToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get controllerObserver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get beneficiary(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get minimumBidFactorWad(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get reserveRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get minRentalDuration(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get maxRentalDuration(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get biddingPhaseDuration(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get biddingPhaseExtensionDuration(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class Initialized1 extends ethereum.Event {
  get params(): Initialized1__Params {
    return new Initialized1__Params(this);
  }
}

export class Initialized1__Params {
  _event: Initialized1;

  constructor(event: Initialized1) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NewTopBid extends ethereum.Event {
  get params(): NewTopBid__Params {
    return new NewTopBid__Params(this);
  }
}

export class NewTopBid__Params {
  _event: NewTopBid;

  constructor(event: NewTopBid) {
    this._event = event;
  }

  get bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PausedAuction extends ethereum.Event {
  get params(): PausedAuction__Params {
    return new PausedAuction__Params(this);
  }
}

export class PausedAuction__Params {
  _event: PausedAuction;

  constructor(event: PausedAuction) {
    this._event = event;
  }

  get topBidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransitionToRentalPhaseFailed extends ethereum.Event {
  get params(): TransitionToRentalPhaseFailed__Params {
    return new TransitionToRentalPhaseFailed__Params(this);
  }
}

export class TransitionToRentalPhaseFailed__Params {
  _event: TransitionToRentalPhaseFailed;

  constructor(event: TransitionToRentalPhaseFailed) {
    this._event = event;
  }

  get topBidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransitionedToBiddingPhase extends ethereum.Event {
  get params(): TransitionedToBiddingPhase__Params {
    return new TransitionedToBiddingPhase__Params(this);
  }
}

export class TransitionedToBiddingPhase__Params {
  _event: TransitionedToBiddingPhase;

  constructor(event: TransitionedToBiddingPhase) {
    this._event = event;
  }
}

export class TransitionedToBiddingPhaseEarly extends ethereum.Event {
  get params(): TransitionedToBiddingPhaseEarly__Params {
    return new TransitionedToBiddingPhaseEarly__Params(this);
  }
}

export class TransitionedToBiddingPhaseEarly__Params {
  _event: TransitionedToBiddingPhaseEarly;

  constructor(event: TransitionedToBiddingPhaseEarly) {
    this._event = event;
  }

  get renter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransitionedToRentalPhase extends ethereum.Event {
  get params(): TransitionedToRentalPhase__Params {
    return new TransitionedToRentalPhase__Params(this);
  }
}

export class TransitionedToRentalPhase__Params {
  _event: TransitionedToRentalPhase;

  constructor(event: TransitionedToRentalPhase) {
    this._event = event;
  }

  get renter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UnpausedAuction extends ethereum.Event {
  get params(): UnpausedAuction__Params {
    return new UnpausedAuction__Params(this);
  }
}

export class UnpausedAuction__Params {
  _event: UnpausedAuction;

  constructor(event: UnpausedAuction) {
    this._event = event;
  }
}

export class EnglishRentalAuction extends ethereum.SmartContract {
  static bind(address: Address): EnglishRentalAuction {
    return new EnglishRentalAuction("EnglishRentalAuction", address);
  }

  acceptedToken(): Address {
    let result = super.call("acceptedToken", "acceptedToken():(address)", []);

    return result[0].toAddress();
  }

  try_acceptedToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "acceptedToken",
      "acceptedToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  afterAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementCreated",
      "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementCreated",
      "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterAgreementTerminated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementTerminated",
      "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementTerminated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementTerminated",
      "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
    param5: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementUpdated",
      "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(param5)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
    param5: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementUpdated",
      "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(param5)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementCreated",
      "beforeAgreementCreated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementCreated",
      "beforeAgreementCreated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementTerminated",
      "beforeAgreementTerminated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementTerminated",
      "beforeAgreementTerminated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementUpdated",
      "beforeAgreementUpdated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementUpdated",
      "beforeAgreementUpdated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beneficiary(): Address {
    let result = super.call("beneficiary", "beneficiary():(address)", []);

    return result[0].toAddress();
  }

  try_beneficiary(): ethereum.CallResult<Address> {
    let result = super.tryCall("beneficiary", "beneficiary():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  biddingPhaseDuration(): BigInt {
    let result = super.call(
      "biddingPhaseDuration",
      "biddingPhaseDuration():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_biddingPhaseDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "biddingPhaseDuration",
      "biddingPhaseDuration():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  biddingPhaseExtensionDuration(): BigInt {
    let result = super.call(
      "biddingPhaseExtensionDuration",
      "biddingPhaseExtensionDuration():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_biddingPhaseExtensionDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "biddingPhaseExtensionDuration",
      "biddingPhaseExtensionDuration():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cfa(): Address {
    let result = super.call("cfa", "cfa():(address)", []);

    return result[0].toAddress();
  }

  try_cfa(): ethereum.CallResult<Address> {
    let result = super.tryCall("cfa", "cfa():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  controllerObserver(): Address {
    let result = super.call(
      "controllerObserver",
      "controllerObserver():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_controllerObserver(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "controllerObserver",
      "controllerObserver():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentPhaseEndTime(): BigInt {
    let result = super.call(
      "currentPhaseEndTime",
      "currentPhaseEndTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentPhaseEndTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentPhaseEndTime",
      "currentPhaseEndTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentRenter(): Address {
    let result = super.call("currentRenter", "currentRenter():(address)", []);

    return result[0].toAddress();
  }

  try_currentRenter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "currentRenter",
      "currentRenter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depositClaimed(): boolean {
    let result = super.call("depositClaimed", "depositClaimed():(bool)", []);

    return result[0].toBoolean();
  }

  try_depositClaimed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("depositClaimed", "depositClaimed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  host(): Address {
    let result = super.call("host", "host():(address)", []);

    return result[0].toAddress();
  }

  try_host(): ethereum.CallResult<Address> {
    let result = super.tryCall("host", "host():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isBidHigher(upper: BigInt, lower: BigInt): boolean {
    let result = super.call("isBidHigher", "isBidHigher(int96,int96):(bool)", [
      ethereum.Value.fromSignedBigInt(upper),
      ethereum.Value.fromSignedBigInt(lower)
    ]);

    return result[0].toBoolean();
  }

  try_isBidHigher(upper: BigInt, lower: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBidHigher",
      "isBidHigher(int96,int96):(bool)",
      [
        ethereum.Value.fromSignedBigInt(upper),
        ethereum.Value.fromSignedBigInt(lower)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isBiddingPhase(): boolean {
    let result = super.call("isBiddingPhase", "isBiddingPhase():(bool)", []);

    return result[0].toBoolean();
  }

  try_isBiddingPhase(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isBiddingPhase", "isBiddingPhase():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRentalPhase(): boolean {
    let result = super.call("isRentalPhase", "isRentalPhase():(bool)", []);

    return result[0].toBoolean();
  }

  try_isRentalPhase(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isRentalPhase", "isRentalPhase():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxRentalDuration(): BigInt {
    let result = super.call(
      "maxRentalDuration",
      "maxRentalDuration():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxRentalDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxRentalDuration",
      "maxRentalDuration():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minRentalDuration(): BigInt {
    let result = super.call(
      "minRentalDuration",
      "minRentalDuration():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_minRentalDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minRentalDuration",
      "minRentalDuration():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumBidFactorWad(): BigInt {
    let result = super.call(
      "minimumBidFactorWad",
      "minimumBidFactorWad():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumBidFactorWad(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumBidFactorWad",
      "minimumBidFactorWad():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  placeBid(flowRate: BigInt, _ctx: Bytes): Bytes {
    let result = super.call("placeBid", "placeBid(int96,bytes):(bytes)", [
      ethereum.Value.fromSignedBigInt(flowRate),
      ethereum.Value.fromBytes(_ctx)
    ]);

    return result[0].toBytes();
  }

  try_placeBid(flowRate: BigInt, _ctx: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("placeBid", "placeBid(int96,bytes):(bytes)", [
      ethereum.Value.fromSignedBigInt(flowRate),
      ethereum.Value.fromBytes(_ctx)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  reserveRate(): BigInt {
    let result = super.call("reserveRate", "reserveRate():(int96)", []);

    return result[0].toBigInt();
  }

  try_reserveRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reserveRate", "reserveRate():(int96)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  senderUserData(param0: Address): Bytes {
    let result = super.call(
      "senderUserData",
      "senderUserData(address):(bytes)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBytes();
  }

  try_senderUserData(param0: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "senderUserData",
      "senderUserData(address):(bytes)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  topBidder(): Address {
    let result = super.call("topBidder", "topBidder():(address)", []);

    return result[0].toAddress();
  }

  try_topBidder(): ethereum.CallResult<Address> {
    let result = super.tryCall("topBidder", "topBidder():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  topFlowRate(): BigInt {
    let result = super.call("topFlowRate", "topFlowRate():(int96)", []);

    return result[0].toBigInt();
  }

  try_topFlowRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("topFlowRate", "topFlowRate():(int96)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AfterAgreementCreatedCall extends ethereum.Call {
  get inputs(): AfterAgreementCreatedCall__Inputs {
    return new AfterAgreementCreatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementCreatedCall__Outputs {
    return new AfterAgreementCreatedCall__Outputs(this);
  }
}

export class AfterAgreementCreatedCall__Inputs {
  _call: AfterAgreementCreatedCall;

  constructor(call: AfterAgreementCreatedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementCreatedCall__Outputs {
  _call: AfterAgreementCreatedCall;

  constructor(call: AfterAgreementCreatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterAgreementTerminatedCall extends ethereum.Call {
  get inputs(): AfterAgreementTerminatedCall__Inputs {
    return new AfterAgreementTerminatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementTerminatedCall__Outputs {
    return new AfterAgreementTerminatedCall__Outputs(this);
  }
}

export class AfterAgreementTerminatedCall__Inputs {
  _call: AfterAgreementTerminatedCall;

  constructor(call: AfterAgreementTerminatedCall) {
    this._call = call;
  }

  get _superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _agreementClass(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementTerminatedCall__Outputs {
  _call: AfterAgreementTerminatedCall;

  constructor(call: AfterAgreementTerminatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterAgreementUpdatedCall extends ethereum.Call {
  get inputs(): AfterAgreementUpdatedCall__Inputs {
    return new AfterAgreementUpdatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementUpdatedCall__Outputs {
    return new AfterAgreementUpdatedCall__Outputs(this);
  }
}

export class AfterAgreementUpdatedCall__Inputs {
  _call: AfterAgreementUpdatedCall;

  constructor(call: AfterAgreementUpdatedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get value5(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementUpdatedCall__Outputs {
  _call: AfterAgreementUpdatedCall;

  constructor(call: AfterAgreementUpdatedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _acceptedToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _host(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _cfa(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _controllerObserver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _beneficiary(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _minimumBidFactorWad(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _reserveRate(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _minRentalDuration(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _maxRentalDuration(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _biddingPhaseDuration(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get _biddingPhaseExtensionDuration(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PlaceBidCall extends ethereum.Call {
  get inputs(): PlaceBidCall__Inputs {
    return new PlaceBidCall__Inputs(this);
  }

  get outputs(): PlaceBidCall__Outputs {
    return new PlaceBidCall__Outputs(this);
  }
}

export class PlaceBidCall__Inputs {
  _call: PlaceBidCall;

  constructor(call: PlaceBidCall) {
    this._call = call;
  }

  get flowRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PlaceBidCall__Outputs {
  _call: PlaceBidCall;

  constructor(call: PlaceBidCall) {
    this._call = call;
  }
}

export class PlaceBid1Call extends ethereum.Call {
  get inputs(): PlaceBid1Call__Inputs {
    return new PlaceBid1Call__Inputs(this);
  }

  get outputs(): PlaceBid1Call__Outputs {
    return new PlaceBid1Call__Outputs(this);
  }
}

export class PlaceBid1Call__Inputs {
  _call: PlaceBid1Call;

  constructor(call: PlaceBid1Call) {
    this._call = call;
  }

  get flowRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class PlaceBid1Call__Outputs {
  _call: PlaceBid1Call;

  constructor(call: PlaceBid1Call) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ReclaimDepositCall extends ethereum.Call {
  get inputs(): ReclaimDepositCall__Inputs {
    return new ReclaimDepositCall__Inputs(this);
  }

  get outputs(): ReclaimDepositCall__Outputs {
    return new ReclaimDepositCall__Outputs(this);
  }
}

export class ReclaimDepositCall__Inputs {
  _call: ReclaimDepositCall;

  constructor(call: ReclaimDepositCall) {
    this._call = call;
  }
}

export class ReclaimDepositCall__Outputs {
  _call: ReclaimDepositCall;

  constructor(call: ReclaimDepositCall) {
    this._call = call;
  }
}

export class TransitionToBiddingPhaseCall extends ethereum.Call {
  get inputs(): TransitionToBiddingPhaseCall__Inputs {
    return new TransitionToBiddingPhaseCall__Inputs(this);
  }

  get outputs(): TransitionToBiddingPhaseCall__Outputs {
    return new TransitionToBiddingPhaseCall__Outputs(this);
  }
}

export class TransitionToBiddingPhaseCall__Inputs {
  _call: TransitionToBiddingPhaseCall;

  constructor(call: TransitionToBiddingPhaseCall) {
    this._call = call;
  }
}

export class TransitionToBiddingPhaseCall__Outputs {
  _call: TransitionToBiddingPhaseCall;

  constructor(call: TransitionToBiddingPhaseCall) {
    this._call = call;
  }
}

export class TransitionToRentalPhaseCall extends ethereum.Call {
  get inputs(): TransitionToRentalPhaseCall__Inputs {
    return new TransitionToRentalPhaseCall__Inputs(this);
  }

  get outputs(): TransitionToRentalPhaseCall__Outputs {
    return new TransitionToRentalPhaseCall__Outputs(this);
  }
}

export class TransitionToRentalPhaseCall__Inputs {
  _call: TransitionToRentalPhaseCall;

  constructor(call: TransitionToRentalPhaseCall) {
    this._call = call;
  }
}

export class TransitionToRentalPhaseCall__Outputs {
  _call: TransitionToRentalPhaseCall;

  constructor(call: TransitionToRentalPhaseCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
